import { Provider } from 'react-redux';
import ChatScreen from './ChatScreen';
import React from 'react';
import store from './store';

/**
 * Defines the properties required to configure the SparkleChat component.
 *
 * @interface IChatScreenProps
 */
export interface IChatScreenProps {
  /**
   * The AI chat platform to use for the conversation.
   * @type {'openai' | 'gemini'}
   * @param platform - The chat platform to use for the conversation (required).
   */
  platform: 'openai' | 'gemini';
  /**
   * The API key for authenticating requests to the specified platform.
   * @type {string}
   * @param apiKey - OpenAI API key (required).
   */
  apiKey: string;
  /**
   * Optional override for the OpenAI API base URL.
   * @type {string}
   * @param apiBaseUrl
   */
  apiBaseUrl?: string;
  /**
   * Optional organization string for openai calls
   * @type {string}
   * @param organization
   */
  organization?: string;
  /**
   * Optional override for the maximum number of tokens allowed by the model's context. Defaults to 4096.
   * @type {number}
   * @param maxModelTokens
   */
  maxModelTokens?: number;
  /**
   * Optional override for the minimum number of tokens allowed for the model's response. Defaults to 1000.
   * @type {number}
   * @param maxResponseTokens
   */
  maxResponseTokens?: number;
  /** Param overrides to send to the [OpenAI chat completion API](https://platform.openai.com/docs/api-reference/chat/create). Options like `temperature` and `presence_penalty` can be tweaked to change the personality of the assistant.
   * @type {object}
   * @param completionParams
   */
  completionParams?: {
    /**
     * ID of the model to use. Currently, only `gpt-3.5-turbo` and `gpt-3.5-turbo-0301` are supported.
     * @type {string}
     */
    model: string;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
     * @type {number}
     */
    temperature?: number | null;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
     * @type {number}
     */
    top_p?: number | null;
    /**
     * How many chat completion choices to generate for each input message.
     * @type {number}
     */
    n?: number | null;
    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
     * @type {boolean}
     */
    stream?: boolean | null;
    /**
     * The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
     * @type {number}
     */
    max_tokens?: number;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     * @type {number}
     */
    presence_penalty?: number | null;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     * @type {number}
     */
    frequency_penalty?: number | null;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     * @type {object}
     */
    logit_bias?: object | null;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * @type {string}
     */
    user?: string;
  };
  /**
   * Instructions or queries to be sent to the chat platform.
   */
  instruction: string;
  /**
   * Optional callback to be invoked when the chat is closed.
   */
  onClose?: () => void;
  /**
   * Optional branding configurations to customize the chat UI appearance.
   */
  brand?: {
    /**
     * The name of the brand to display in the chat interface.
     */
    name?: string;
    /**
     * URL to the brand's logo image.
     */
    logo?: string;
    /**
     * The primary color used in the chat UI, affecting buttons and other elements.
     */
    primaryColor?: string;
    /**
     * The background color for the input container where users type their messages.
     */
    inputContainerColor: string;
    /**
     * The background color for the chat header.
     */
    headerColor?: string;
    /**
     * The general background color for the chat interface.
     */
    backgroundColor?: string;
    /**
     * The color of the text across the chat interface.
     */
    textColor?: string;
    /**
     * The background color for messages received (left-aligned bubbles).
     */
    leftBubbleColor?: string;
    /**
     * The background color for messages sent (right-aligned bubbles).
     */
    rightBubbleColor?: string;
  };
}

import 'react-native-url-polyfill/auto';

const SparkleChat = (props: IChatScreenProps) => {
  return (
    <Provider store={store}>
      <ChatScreen {...props} />
    </Provider>
  );
};

export default SparkleChat;
